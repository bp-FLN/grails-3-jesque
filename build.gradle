buildscript {
	ext {
		grailsVersion = project.grailsVersion
	}
	repositories {
		mavenLocal()
		maven { url "https://repo.grails.org/grails/core" }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
	}
}

plugins {
	id "io.spring.dependency-management" version "0.5.2.RELEASE"
}

version "1.3.2-UBERALL"
group "org.grails.plugins"

apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "spring-boot"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-gsp"
apply plugin: "maven-publish"

ext {
	grailsVersion = project.grailsVersion
	gradleWrapperVersion = project.gradleWrapperVersion
}

sourceCompatibility = 1.7
targetCompatibility = 1.7


repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://repo.grails.org/grails/core" }
	maven {
		url "https://maven.pkg.github.com/uberall/*"
		credentials {
			username = System.getenv("GITHUB_USER")
			password = System.getenv("GITHUB_TOKEN")
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.grails:grails-bom:$grailsVersion"
	}
	applyMavenExclusions false
}

dependencies {
	provided 'org.springframework.boot:spring-boot-starter-logging'
	provided "org.springframework.boot:spring-boot-starter-actuator"
	provided "org.springframework.boot:spring-boot-autoconfigure"
	provided "org.springframework.boot:spring-boot-starter-tomcat"

	provided "org.grails:grails-web-boot"
	provided "org.grails:grails-dependencies"
	provided 'javax.servlet:javax.servlet-api:3.1.0'

	compile('org.grails.plugins:redis:2.0.5')
	compile('net.greghaines:jesque:2.1.7-UBERALL')
	compile('redis.clients:jedis:2.9.3')
	compile('joda-time:joda-time:2.5')

	testCompile "org.grails:grails-plugin-testing"

	console "org.grails:grails-console"
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleWrapperVersion
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/uberall/grails-3-jesque")
            credentials {
                username = System.getenv("GITHUB_USER") ?: project.findProperty("gpr.user")
                password = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

test {
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}
